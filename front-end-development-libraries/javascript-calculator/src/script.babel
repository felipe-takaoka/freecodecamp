const { DeleteOutlined, CloseOutlined, MinusOutlined, PlusOutlined } = icons;
const { Button, Divider, Row, Col } = window.antd;

const Numpad = (props) => {
  return (
    <div id="numpad">
      <Row>
        <Col span={12}>
          <Button danger block icon={<DeleteOutlined />}
            type="primary"
            id="clear"
            onClick={props.handleClear} />
        </Col>
        <Col span={6}>
          <Button block id="divide" onClick={props.handleOperatorInput}>/</Button>
        </Col>
        <Col span={6}>
          <Button block icon={<CloseOutlined />} id="multiply" onClick={props.handleOperatorInput} />
        </Col>
      </Row>
      <Row>
        <Col span={6}>
          <Button block id="seven" onClick={props.handleDigitInput}>7</Button>
        </Col>
        <Col span={6}>
          <Button block id="eight" onClick={props.handleDigitInput}>8</Button>
        </Col>
        <Col span={6}>
          <Button block id="nine" onClick={props.handleDigitInput}>9</Button>
        </Col>
        <Col span={6}>
          <Button block id="subtract" icon={<MinusOutlined />} onClick={props.handleOperatorInput} />
        </Col>
      </Row>
      <Row>
        <Col span={6}>
          <Button block id="four" onClick={props.handleDigitInput}>4</Button>
        </Col>
        <Col span={6}>
          <Button block id="five" onClick={props.handleDigitInput}>5</Button>
        </Col>
        <Col span={6}>
          <Button block id="six" onClick={props.handleDigitInput}>6</Button>
        </Col>
        <Col span={6}>
          <Button block icon={<PlusOutlined />} id="add" onClick={props.handleOperatorInput} />
        </Col>
      </Row>
      <Row>
        <Col span={18}>
          <Row>
            <Col span={8}>
              <Button block id="one" onClick={props.handleDigitInput}>1</Button>
            </Col>
            <Col span={8}>
              <Button block id="two" onClick={props.handleDigitInput}>2</Button>
            </Col>
            <Col span={8}>
              <Button block id="three" onClick={props.handleDigitInput}>3</Button>
            </Col>
          </Row>
          <Row>
            <Col span={16}>
              <Button block id="zero" onClick={props.handleDigitInput}>0</Button>
            </Col>
            <Col span={8}>
              <Button block id="decimal" onClick={props.handleDigitInput}>.</Button>
            </Col>
          </Row>
        </Col>
        <Col span={6}>
          <Button type="primary" block style={{height: "100%"}} id="equals" onClick={props.handleResult}>
            =
          </Button>
        </Col>
      </Row>
    </div>
  )
}

const initState = {
  input: "0",
  output: '',
  result: '',
  prevOp: null,
}

class App extends React.Component {
  constructor(props) {
    super(props);
    
    this.state = initState;
    this.handleClear = this.handleClear.bind(this);
    this.handleDigitInput = this.handleDigitInput.bind(this);
    this.handleOperatorInput = this.handleOperatorInput.bind(this);
    this.handleResult = this.handleResult.bind(this);
    this.handleKeyPress = this.handleKeyPress.bind(this);
    this.parse = this.parse.bind(this);
  }
  
  componentDidMount() {
    document.addEventListener('keydown', this.handleKeyPress);
  }
  
  handleClear() {
    this.setState(initState);
  }
  
  handleDigitInput(event) {
    let digit = event.currentTarget.children[0].textContent;
    this.setState((prevState, props) => {
      if (digit === '.') {
        if (prevState.input.includes('.'))
          return prevState
        else
          return {input: prevState.input + digit, output: prevState.output + digit}
      }
      else if (prevState.input != '0')
        return {input: prevState.input + digit, output: prevState.output + digit}
      else
        return {input: digit, output: prevState.output + digit}
    });
  }
  
  handleOperatorInput(event) {
    const idToOperator = {
      "add": "+",
      "subtract": "-",
      "multiply": "*",
      "divide": "/"
    }
    const operator = idToOperator[event.currentTarget.id];
    
    this.setState((prevState, props) => {
      var output;
      
      const operators = Object.values(idToOperator);
      const prevInput = prevState.output[prevState.output.length-1];
      const prevPrevInput = prevState.output[prevState.output.length-2];
      
      if (operators.includes(prevInput)) {
        if (operator !== "-") {
          if (operators.includes(prevPrevInput))
            prevState.output = prevState.output.slice(0, prevState.output.length-2)
          else
            prevState.output = prevState.output.slice(0, prevState.output.length-1)
        } else if (prevInput === "-") {
          prevState.output = prevState.output.slice(0, prevState.output.length-1)
        }
      }

      if (prevState.output === '')
        output = prevState.input + operator;
      else if (prevState.result !== '')
        output = prevState.result.toString() + operator;
      else
        output = prevState.output + operator;
      
      return {
        input: "",
        output: output,
        prevOp: operator
      }
    });
  }
  
  parse(str) {
    try {
      return Function(`'use strict'; return (${str})`)()
    }
    catch (err) {
      this.setState({output: `err(${str})`});
    }
  }
  
  handleResult(e) {
    this.setState((prevState, props) => {
      if (prevState.prevOp) {
        const expr = prevState.output;
        const res = this.parse(expr);
        return {
          input: res,
          output: expr + "=" + res,
          result: res
        }
      }
      else
        return prevState
    });
  }
  
  handleKeyPress(e) {
    const keyIds = {
      48:  "zero",
      49:  "one",
      50:  "two",
      51:  "three",
      52:  "four",
      53:  "five",
      54:  "six",
      55:  "seven",
      56:  "eight",
      57:  "nine",
      8:   "clear",
      13:  "equals",
      61:  "equals",
      187: "equals",
      45:  "subtract",
      189: "subtract",
      47:  "divide",
      191: "divide",
      42:  "multiply",
      43:  "add",
      46:  "decimal",
      190: "decimal"
    }
    
    let id = keyIds[e.keyCode];
    switch (e.keyCode) {
      case 56:
        id = e.shiftKey ? "multiply" : id;
        break;
      case 187:
        id = e.shiftKey ?Â "add" : id;
        break;
    }
    
    if (id) {
      const button = document.getElementById(id);
      button.click();
    }
  }
  
  render() {
    return (
      <div id="calculator">
        <Row>
          <Col span={24}>
            <div id="screen">
              <div id="output">{this.state.output}</div>
              <div id="display">{this.state.input}</div>
            </div>
          </Col>
        </Row>
        <Numpad handleClear={this.handleClear}
                handleDigitInput={this.handleDigitInput}
                handleOperatorInput={this.handleOperatorInput}
                handleResult={this.handleResult} />
      </div>
    )
  }
}

ReactDOM.render(<App />, document.getElementById("app"));
